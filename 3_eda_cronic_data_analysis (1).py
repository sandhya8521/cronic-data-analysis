# -*- coding: utf-8 -*-
"""3. EDA cronic data analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12u-h3gozNjl4MbUH0zZahXNhVVeX1PXy
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('kidney_disease.csv')
df.head()

df.shape

df.info()

df.drop('id', axis = 1, inplace = True)

df.columns

df.columns = ['age', 'blood_pressure', 'specific_gravity', 'albumin', 'sugar', 'red_blood_cells', 'pus_cell',
              'pus_cell_clumps', 'bacteria', 'blood_glucose_random', 'blood_urea', 'serum_creatinine', 'sodium',
              'potassium', 'haemoglobin', 'packed_cell_volume', 'white_blood_cell_count', 'red_blood_cell_count',
              'hypertension', 'diabetes_mellitus', 'coronary_artery_disease', 'appetite', 'peda_edema',
              'aanemia', 'class']

df

df.describe()

df.info()

df['packed_cell_volume'] = pd.to_numeric(df['packed_cell_volume'], errors = 'coerce')

df.info()

df['white_blood_cell_count'] = pd.to_numeric(df['white_blood_cell_count'], errors = 'coerce')

df['red_blood_cell_count'] = pd.to_numeric(df['red_blood_cell_count'], errors = 'coerce')

df.dtypes

cat_cols = [col for col in df.columns if df[col].dtype == "object"]
num_cols = [col for col in df.columns if df[col].dtype != "object"]

cat_cols

num_cols

for col in cat_cols:
    print(f"{col} has {df[col].unique()} values \n")

#replace unwanted values

df['diabetes_mellitus'].replace(to_replace = {' yes':'yes', '\tyes': 'yes', '\tno': 'no'}, inplace = True)

df['diabetes_mellitus'].unique()

df['coronary_artery_disease'] = df['coronary_artery_disease'].replace(to_replace = '\tno', value = 'no')

df['coronary_artery_disease'].unique()

df['class'] = df['class'].replace(to_replace = 'ckd\t', value = 'ckd')

df['class'].unique()

df['class'] = df['class'].map({'ckd': 0, 'notckd': 1})

df['class'].unique()

for col in cat_cols:
    print(f"{col} has {df[col].unique()} values \n")

#Univariate

plt.figure(figsize = (10, 6))
sns.histplot(df['age'].dropna(), kde = True, bins = 20, color = 'skyblue')
plt.title('Dist of age')
plt.xlabel('Age')
plt.ylabel('frequency')
plt.show()

#insighst>> dist of age is right skewed

df.columns

sns.countplot(x = 'hypertension', data = df, palette = 'viridis')

#150 of them has hypertension

df.columns

sns.boxplot(x = 'class', y = 'blood_urea', data = df, palette = 'viridis')

#insights>> outliers

sns.violinplot(x = 'class', y = 'serum_creatinine', data = df, palette = "muted")

df.columns

sns.countplot(x = 'aanemia', data = df, palette = 'pastel')

df.columns

df.appetite.value_counts().plot.pie(autopct = '%1.1f%%', colors = ['lightcoral', 'lightgreen'], explode = (0, 0.1), startangle = 90, shadow = True)

sns.countplot(x = 'pus_cell_clumps', data = df)

df.columns

sns.histplot(df['white_blood_cell_count'].dropna(), bins = 20, kde = True, color = 'darkorange')

df['diabetes_mellitus'].value_counts().plot.pie(autopct = "%1.1f%%", wedgeprops = dict(width=0.3))

df.columns

sns.countplot(x = 'coronary_artery_disease', data = df)

sns.countplot(x = 'peda_edema', data = df)

df.columns

sns.countplot(x = 'bacteria', data=df)

#bivariate analysis

sns.scatterplot(x = 'age', y = 'blood_pressure', data = df)

sns.scatterplot(x = 'age', y = 'blood_pressure', data = df, hue = 'class', palette = 'coolwarm')

#as age is increasing, bp is increasing

sns.boxplot(x = 'diabetes_mellitus', y = 'albumin', data =df)

sns.violinplot(x = 'diabetes_mellitus', y = 'albumin', data =df, inner= 'quartile')

#stacked bar chart
diabetes_hypertension = pd.crosstab(df['diabetes_mellitus'], df['hypertension'])

diabetes_hypertension.plot(kind = 'bar', stacked = True)

#multivariate analysis

cols = ['age', 'blood_pressure', 'blood_glucose_random', 'serum_creatinine', 'class']

g = sns.PairGrid(df[cols], hue='class', palette = 'coolwarm')
g.map_upper(sns.scatterplot)
g.map_lower(sns.kdeplot, cmap = 'Blues_d')
g.map_diag(sns.histplot)
g.add_legend()
plt.title("PairGrid for selected columns")
plt.show()

cols = ['age', 'blood_pressure', 'blood_glucose_random', 'serum_creatinine', 'class']
sns.pairplot(df[cols], hue = 'class', palette = 'husl')

df.corr(numeric_only=True)

corr = df.corr(numeric_only=True)
plt.figure(figsize = (12, 8))
sns.heatmap(corr, annot = True, cmap = 'coolwarm', linewidth = .5)

sns.swarmplot(x='diabetes_mellitus', y='age', hue='hypertension', data=df, palette='pastel', size=8)

fig = px.scatter(df, x = 'age', y = 'blood_pressure', color = 'class', hover_data = ['serum_creatinine', 'haemoglobin'],title = "interactive scatterplot with hover information")
fig.show()

fig = px.scatter_3d(df, x = 'age', y = 'blood_pressure',z = 'serum_creatinine', color = 'class', title = "3d scatter plot scatterplot")
fig.show()

import plotly.graph_objects as go

data_corr = df.corr(numeric_only = True)
fig = go.Figure(data =go.Heatmap(z = data_corr.values,
                          x = data_corr.columns,
                          y=data_corr.index))
fig.show()

fig = px.scatter_3d(df, x='age', y='blood_pressure', z='serum_creatinine', color='haemoglobin',
                    title='3D Scatter plot with Color Gradient')
fig.show()

df.isnull().sum()

cat_cols

num_cols

#replace with median
median_values = df[num_cols].median()

median_values

df[num_cols] = df[num_cols].fillna(median_values)

df[num_cols].isna().sum()

mode_values = df.mode().iloc[0]
df[cat_cols] = df[cat_cols].fillna(mode_values)

df[cat_cols].isna().sum()

df.dtypes

#encoding
from sklearn.preprocessing import LabelEncoder

LabelEncoder = LabelEncoder()
for col in cat_cols:
    df[col] = LabelEncoder.fit_transform(df[col])

df.head()

X = df.drop('class', axis = 1)
y = df['class']

#train-test split and ml model training